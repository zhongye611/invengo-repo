#web容器配置
server:
  context-path: /
  port: 2222
#启用调试模式
debug: true
#日志配置
logging:
  config: classpath:log4j2-dev.xml
#spring配置
spring:
  application:
    name: super-boot-user-center
    index: ${random.int}
  #使用@Aspect注解将一个java类定义为切面类
  #使用@Pointcut定义一个切入点，可以是一个规则表达式，比如下例中某个package下的所有函数，也可以是一个注解等。
  #根据需要在切入点不同位置的切入内容
  #使用@Before在切入点开始处切入内容
  #使用@After在切入点结尾处切入内容
  #使用@AfterReturning在切入点return内容之后切入内容（可以用来对处理返回值做一些加工处理）
  #使用@Around在切入点前后切入内容，并自己控制何时执行切入点自身的内容
  #使用@AfterThrowing用来处理当切入内容部分抛出异常之后的处理逻辑
  #使用CGLIB来实现AOP，false是标准Java的实现
  aop:
    proxy-target-class: true
  http:
    encoding:
      force: true
      charset: UTF-8
    multipart:
      enabled: true
      max-file-size: 1024MB
  #热加载配置
  devtools:
    remote:
      secret: thisismysecret
  jpa:
     properties:
        hibernate:
          show_sql: true
          format_sql: true
  #数据库连接配置
  datasource:
    base:
      name: baseDB
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.jdbc.Driver
      url: jdbc:mysql://localhost:3306/super_boot_base?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&remarks=true&useInformationSchema=true
      username: superboot
      password: 123456
      #初始化大小
      initial-size: 5
      min-idle: 5
      max-active: 50
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 30000
      #检测连接是否有效的sql
      validation-query: SELECT 'x'
      validation-query-timeout: 10000
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小 Mysql下建议关闭
      pool-prepared-statements: false
      max-pool-prepared-statement-per-connection-size: 20
      #max-open-prepared-statements: 1
      filters: stat,wall,log4j2
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      useGlobalDataSourceStat: true

    business:
      name: businessDB
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.jdbc.Driver
      url: jdbc:mysql://localhost:3306/super_boot_user?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&remarks=true&useInformationSchema=true
      username: superboot
      password: 123456
      #初始化大小
      initial-size: 5
      min-idle: 5
      max-active: 50
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 30000
      #检测连接是否有效的sql
      validation-query: SELECT 'x'
      validation-query-timeout: 10000
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小 Mysql下建议关闭
      pool-prepared-statements: false
      max-pool-prepared-statement-per-connection-size: 20
      #max-open-prepared-statements: 1
      filters: stat,wall,log4j2
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      useGlobalDataSourceStat: true
    druid:
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,log4j2
      #配置密码加密存储
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      #启动ConfigFilter 启用密码加密后必须启用此配置
      filter:
        config:
          enabled: true
      #Druid监控拦截相关配置相关配置
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"
        #缺省sessionStatMaxCount是1000个
        session-stat-max-count: 1000
        #关闭session统计功能
        session-stat-enable: false
        #druid 0.2.7版本开始支持profile，配置profileEnable能够监控单个url调用的sql列表。
        profile-enable: false
      #StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置
      #启动项目后访问 http://127.0.0.1:8080/druid
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        #禁用HTML页面上的“Reset All”功能
        reset-enable: false
        login-username: superboot
        login-password: superboot
        #IP白名单(没有配置或者为空，则允许所有访问)
        allow: 127.0.0.1,192.168.30.50
        #IP黑名单 (存在共同时，deny优先于allow)
        deny: 192.168.1.102
  redis:
    cluster:
      nodes: 127.0.0.1:7000, 127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003,127.0.0.1:7004,127.0.0.1:7005
      pool:
        max-active: 10
        max-wait: 10000
        max-idle: 20
        min-idle: 5
      cache-expire: 1800
      timeout: 10000
  mvc:
    throw-exception-if-no-handler-found: true
  cloud:
    #启用消息追踪
    bus:
      trace:
        enabled: true
  #配置消息总线
  rabbitmq:
    host: localhost
    port: 5672
    username: admin
    password: admin
#关闭安全认证
management:
  security:
    enabled: false
#Twitter_Snowflake 序列号生成器配置
Snowflake:
  #工作中心ID 0-31
  workerId: 0
  #数据中心ID(0~31)
  datacenterId: 0

#启用服务容错保护
feign:
  hystrix:
    enabled: true
#配置注册中心信息
eureka:
  instance:
    #心跳时间间隔
    lease-renewal-interval-in-seconds: 10
    #无心跳多久后,该服务失效
    lease-expiration-duration-in-seconds: 30
    appname: 用户中心
#该配置是让Hystrix的超时时间改为30秒
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 30000